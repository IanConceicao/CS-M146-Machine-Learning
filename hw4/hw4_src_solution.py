# -*- coding: utf-8 -*-
"""Fall2020-CS146-HW4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16MwS4NIjYE5j8RgmAnAAhKFT7rQgf8uH
"""

# To add your own Drive Run this cell.
from google.colab import drive
drive.mount('/content/drive')



"""
Author      : Zeyuan Chen, adapted from Yi-Chieh Wu, Sriram Sankararman
Description : Twitter
"""

import warnings
warnings.filterwarnings('ignore')

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt


from sklearn import metrics 
from sklearn.svm import SVC
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA
from sklearn.mixture import GaussianMixture
from sklearn.metrics.cluster import adjusted_rand_score

import pandas as pd
### ========== TODO : START ========== ###
# append you own path to the tweeter_df.txt file after "/content/drive/My Drive/"
# i.e. "/content/drive/My Drive/CM146HW4/tweets_df.txt"
tweets_df = pd.read_csv("/content/drive/My Drive/01 Classes/Junior Q1/CS 146/Homeworks/HW4/data/tweets_df.txt", index_col = 0)
### ========== TODO : END ========== ###

X = tweets_df.values[:,:-2]
y = tweets_df.values[:, -2]
movies = tweets_df.values[:, -1]

train_idx = np.where((movies == 1) | (movies == 3))[0]
dev_idx   = np.where(movies == 2)[0]
test_idx  = np.where(movies == 0)[0]

X_train, X_dev, X_test = X[train_idx,], X[dev_idx,], X[test_idx,]
y_train, y_dev, y_test = y[train_idx,], y[dev_idx,], y[test_idx,]

### ========== TODO : START ========== ###
# part 4.1a: show the train and development set f1-score when C is set to 10^-3 10^-2 10^-1 1, 10, 100, 1000
#            This can typically be done in 20 lines or so
C_vals = 10.0 ** np.arange(-3, 4)
train_scores = []
dev_scores = []
for C_val in C_vals:
  #Create, fit, and get predictions
  model = SVC(kernel='linear',C=C_val)
  model.fit(X_train,y_train)
  y_pred = model.predict(X_train)
  
  #Take score measurements
  train_scores.append(metrics.f1_score(y_train,y_pred))
  y_pred = model.predict(X_dev)
  dev_scores.append(metrics.f1_score(y_dev,y_pred))

#Print information
print("C Vals: {}".format(C_vals))
print("Train scores: {}".format(train_scores))
print("Dev scores: {}".format(dev_scores))

#Plot information
plt.figure()
plt.plot(C_vals, train_scores, 'o',label="Training Score")
plt.plot(C_vals, dev_scores, 'o',label="Dev Score")
plt.xscale("log")
plt.legend()
plt.xlabel("C Value")
plt.ylabel("F1-Score")
plt.show()
### ========== TODO : END ========== ###

### ========== TODO : START ========== ###
# part 4.1b: select the best model based on development set f1-score 
#            retrain the model on train and dev set
#            test the final model on the test set
#            This can typically be done in 5 lines or so

#Combine the sets
X_train_and_dev = np.concatenate((X_train, X_dev))
y_train_and_dev = np.concatenate((y_train, y_dev))

#Create and train the model, make predictions
model = SVC(kernel='linear',C=1)
model.fit(X_train_and_dev,y_train_and_dev)
y_pred = model.predict(X_test)

#Run metrics
score = metrics.f1_score(y_test,y_pred)
print("The F-1 score with C=1 on the test set is: {}".format(score))

### ========== TODO : END ========== ###

def plot_scatter(embedding_2d, labels, show = True, save_as = None, title = None):
    """
    Visualize 2D data

    Parameters
    --------------------
        embedding_2d   -- numpy array of shape (n,2) samples
        labels         -- numpy array of shape (n,) labels
        show           -- optional boolean indicator on if display the visualziation, default set to True 
        save_as        -- optional string indicating where we should save the figure, default set to None
        title          -- optional string indicating what should be the title, default set to None
    --------------------
        None    
    """
    
    plt.scatter(embedding_2d[:,0], embedding_2d[:,1], c = labels) 
    if title is not None:
        plt.title(title)
    if save_as is not None:
        plt.savefig(save_as)
    if show:
        plt.show()

pca = PCA(n_components=2)
pca.fit(X)
X_embedding = pca.transform(X)

### ========== TODO : START ========== ###
# part 4.2a: visualize the embedding. First color the dots by positive or negative review, then by movies 
#            This can typically be done in 2 lines or so

plot_scatter(X_embedding,y,title="X-Embedded Data Colored by Positive/Negative Reviews")
plot_scatter(X_embedding,movies,title="X-Embedded Data Colored by which Movie Referring To")


### ========== TODO : END ========== ###

### ========== TODO : START ========== ###
# part 4.2b: First color the dots by Kmeans with 4 components, random initialization, 1 iteration, random_state = 2
#            then by GMM with 4 components, random starting point, 1 iteration and random_state = 0
#            report the adjusted rand score for both
#            This can typically be done in 10 lines or so

#Kmeans
#------
#Create and fit model, then make prediction
kmeans_model = KMeans(n_clusters=4,init="random",n_init=1,random_state=2)
kmeans_model.fit(X_embedding)
y_pred_kmeans = kmeans_model.labels_

#Generate Data
plot_scatter(X_embedding,y_pred_kmeans,title="K-Means Prediction of which Movies Tweets Refer To")
kmeans_score = adjusted_rand_score(movies, y_pred_kmeans)
print("The K-Means model had an adjusted rand score of: {}".format(kmeans_score))

#GMM
#---
#Create and fit model, then make prediction
gmm_model = GaussianMixture(n_components=4,init_params="random",random_state=0)
gmm_model.fit(X_embedding)
y_pred_kmeans = gmm_model.predict(X_embedding)

#Generate Data
plot_scatter(X_embedding,y_pred_kmeans,title="GMM Prediction of which Movies Tweets Refer To")
gmm_score = adjusted_rand_score(movies, y_pred_kmeans)
print("The K-Means model had an adjusted rand score of: {}".format(gmm_score))


### ========== TODO : END ========== ###

### ========== TODO : START ========== ###
# part 4.2c: First color the dots by Kmeans with 4 components, random initialization, 100 iterations, random_state = 2
#            then by GMM with 4 components, random starting point, 100 iterations and random_state = 0
#            report then adjusted rand score for both
#            This can typically be done in 10 lines or so

#Kmeans
#------
#Create and fit model, then make prediction
kmeans_model = KMeans(n_clusters=4,init="random",n_init=100,random_state=2)
kmeans_model.fit(X_embedding)
y_pred_kmeans = kmeans_model.labels_

#Generate Data
plot_scatter(X_embedding,y_pred_kmeans,title="K-Means Prediction of which Movies Tweets Refer To")
kmeans_score = adjusted_rand_score(movies, y_pred_kmeans)
print("The K-Means model had an adjusted rand score of: {}".format(kmeans_score))

#GMM
#---
#Create and fit model, then make prediction
gmm_model = GaussianMixture(n_components=4,init_params="random",n_init=100,random_state=0)
gmm_model.fit(X_embedding)
y_pred_kmeans = gmm_model.predict(X_embedding)

#Generate Data
plot_scatter(X_embedding,y_pred_kmeans,title="GMM Prediction of which Movies Tweets Refer To")
gmm_score = adjusted_rand_score(movies, y_pred_kmeans)
print("The K-Means model had an adjusted rand score of: {}".format(gmm_score))
### ========== TODO : END ========== ###