# -*- coding: utf-8 -*-
"""Copy of Fall2020-CS146-HW1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iR4MiBH0EW7_Hh680rkpSg7V6dIPOa6b
"""

import sys

# To add your own Drive Run this cell.
from google.colab import drive
drive.mount('/content/drive')

# Please append your own directory after â€˜/content/drive/My Drive/'
# where you have nutil.py and adult_subsample.csv
### ========== TODO : START ========== ###
# for example: sys.path += ['/content/drive/My Drive/Fall2020-CS146-HW1'] 
sys.path += ['/content/drive/My Drive/01 Classes/Junior Q1/CS 146/Homeworks/HW1']
### ========== TODO : END ========== ###

from nutil import *

# Use only the provided packages!
import math
import csv

from collections import Counter

from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import cross_val_score
from sklearn import metrics
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import StratifiedShuffleSplit

######################################################################
# Immutatble classes
######################################################################

class Classifier(object) :
    """
    Classifier interface.
    """

    def fit(self, X, y):
        raise NotImplementedError()

    def predict(self, X):
        raise NotImplementedError()


class MajorityVoteClassifier(Classifier) :

    def __init__(self) :
        """
        A classifier that always predicts the majority class.

        Attributes
        --------------------
            prediction_ -- majority class
        """
        self.prediction_ = None

    def fit(self, X, y) :
        """
        Build a majority vote classifier from the training set (X, y).

        Parameters
        --------------------
            X    -- numpy array of shape (n,d), samples
            y    -- numpy array of shape (n,), target classes

        Returns
        --------------------
            self -- an instance of self
        """
        majority_val = Counter(y).most_common(1)[0][0]
        self.prediction_ = majority_val
        return self

    def predict(self, X) :
        """
        Predict class values.

        Parameters
        --------------------
            X    -- numpy array of shape (n,d), samples

        Returns
        --------------------
            y    -- numpy array of shape (n,), predicted classes
        """
        if self.prediction_ is None :
            raise Exception("Classifier not initialized. Perform a fit first.")

        n,d = X.shape
        y = [self.prediction_] * n
        return y

######################################################################
# Mutatble classes
######################################################################

class RandomClassifier(Classifier) :

    def __init__(self) :
        """
        A classifier that predicts according to the distribution of the classes.

        Attributes
        --------------------
            probabilities_ -- class distribution dict (key = class, val = probability of class)
        """
        self.probabilities_ = None

    def fit(self, X, y) :
        """
        Build a random classifier from the training set (X, y).

        Parameters
        --------------------
            X    -- numpy array of shape (n,d), samples
            y    -- numpy array of shape (n,), target classes

        Returns
        --------------------
            self -- an instance of self
        """

        ### ========== TODO : START ========== ###
        # part b: set self.probabilities_ according to the training set
        most_common = Counter(y).most_common(2)
        self.probabilities_ = {
            most_common[0][0] : float(most_common[0][1]) / float(most_common[0][1] + most_common[1][1]),
            most_common[1][0] : float(most_common[1][1]) / float(most_common[0][1] + most_common[1][1])
        }

        ### ========== TODO : END ========== ###
        return self

    def predict(self, X, seed=1234) :
        """
        Predict class values.

        Parameters
        --------------------
            X    -- numpy array of shape (n,d), samples
            seed -- integer, random seed

        Returns
        --------------------
            y    -- numpy array of shape (n,), predicted classes
        """
        if self.probabilities_ is None :
            raise Exception("Classifier not initialized. Perform a fit first.")
        np.random.seed(seed)

        ### ========== TODO : START ========== ###
        # part b: predict the class for each test example
        # hint: use np.random.choice (be careful of the parameters)
        y = np.random.choice([0,1],X.shape[0],p=[self.probabilities_[0],self.probabilities_[1]])
        
        ### ========== TODO : END ========== ###

        return y

######################################################################
# Immutatble functions
######################################################################

def plot_histograms(X, y, Xnames, yname) :
    n,d = X.shape  # n = number of examples, d =  number of features
    fig = plt.figure(figsize=(20,15))
    ncol = 3
    nrow = d // ncol + 1
    for i in range(d) :
        fig.add_subplot (nrow,ncol,i+1)
        data, bins, align, labels = plot_histogram(X[:,i], y, Xname=Xnames[i], yname=yname, show = False)
        n, bins, patches = plt.hist(data, bins=bins, align=align, alpha=0.5, label=labels)
        plt.xlabel(Xnames[i])
        plt.ylabel('Frequency')
        plt.legend() #plt.legend(loc='upper left')

    plt.savefig ('histograms.pdf')


def plot_histogram(X, y, Xname, yname, show = True) :
    """
    Plots histogram of values in X grouped by y.

    Parameters
    --------------------
        X     -- numpy array of shape (n,d), feature values
        y     -- numpy array of shape (n,), target classes
        Xname -- string, name of feature
        yname -- string, name of target
    """

    # set up data for plotting
    targets = sorted(set(y))
    data = []; labels = []
    for target in targets :
        features = [X[i] for i in range(len(y)) if y[i] == target]
        data.append(features)
        labels.append('%s = %s' % (yname, target))

    # set up histogram bins
    features = set(X)
    nfeatures = len(features)
    test_range = list(range(int(math.floor(min(features))), int(math.ceil(max(features)))+1))
    if nfeatures < 10 and sorted(features) == test_range:
        bins = test_range + [test_range[-1] + 1] # add last bin
        align = 'left'
    else :
        bins = 10
        align = 'mid'

    # plot
    if show == True:
        plt.figure()
        n, bins, patches = plt.hist(data, bins=bins, align=align, alpha=0.5, label=labels)
        plt.xlabel(Xname)
        plt.ylabel('Frequency')
        plt.legend() #plt.legend(loc='upper left')
        plt.show()

    return data, bins, align, labels

######################################################################
# Mutatble functions
######################################################################

def error(clf, X, y, ntrials=100, test_size=0.2) :
    """
    Computes the classifier error over a random split of the data,
    averaged over ntrials runs.

    Parameters
    --------------------
        clf         -- classifier
        X           -- numpy array of shape (n,d), features values
        y           -- numpy array of shape (n,), target classes
        ntrials     -- integer, number of trials

    Returns
    --------------------
        train_error -- float, training error
        test_error  -- float, test error
        f1_score    -- float, test "micro" averaged f1 score
    """

    ### ========== TODO : START ========== ###
    # compute cross-validation error using StratifiedShuffleSplit over ntrials
    # hint: use train_test_split (be careful of the parameters)
    train_error = 0
    test_error = 0
    f1_score = 0
    SSS = StratifiedShuffleSplit(n_splits = ntrials, test_size = test_size, \
                                      random_state = 0)
    
    for train_index, test_index in SSS.split(X,y):
      #Get the data
      X_train, X_test = X[train_index], X[test_index]
      y_train, y_test = y[train_index], y[test_index]
      
      #Make the predictions
      clf.fit(X_train, y_train)
      y_train_pred = clf.predict(X_train)
      y_test_pred = clf.predict(X_test)

      #Measure the errors
      train_error += 1 - metrics.accuracy_score(y_train, y_train_pred, normalize = True)
      test_error += 1 - metrics.accuracy_score(y_test, y_test_pred, normalize = True)
      f1_score += metrics.f1_score(y_test,y_test_pred,average="micro")

    #Average the errors
    train_error = train_error / float(ntrials)
    test_error = test_error / float(ntrials)
    f1_score = f1_score / float(ntrials)
    
   
    ### ========== TODO : END ========== ###

    return train_error, test_error, f1_score

######################################################################
# Immutatble functions
######################################################################


def write_predictions(y_pred, filename, yname=None) :
    """Write out predictions to csv file."""
    out = open(filename, 'wb')
    f = csv.writer(out)
    if yname :
        f.writerow([yname])
    f.writerows(list(zip(y_pred)))
    out.close()

######################################################################
# main
######################################################################

def main():
    
    
    
    # load adult_subsample dataset with correct file path
    ### ========== TODO : START ========== ###
    data_file =  "/content/drive/My Drive/01 Classes/Junior Q1/CS 146/Homeworks/HW1/adult_subsample.csv"
    ### ========== TODO : END ========== ###
    



    data = load_data(data_file, header=1, predict_col=-1)

    X = data.X; Xnames = data.Xnames
    y = data.y; yname = data.yname
    n,d = X.shape  # n = number of examples, d =  number of features

    #Standarize the data 
    scaler = StandardScaler()
    scaler.fit(X)
    X = scaler.transform(X)
    
    plt.figure()
    #========================================
    # part a: plot histograms of each feature
    print('Plotting...')
    plot_histograms (X, y, Xnames=Xnames, yname=yname)
    




    ### ========== TODO : START ========== ###
    # part i: Preprocess X (e.g., normalize)
    
    ### ========== TODO : END ========== ###




    #========================================
    # train Majority Vote classifier on data
    print('Classifying using Majority Vote...')
    clf = MajorityVoteClassifier() # create MajorityVote classifier, which includes all model parameters
    clf.fit(X, y)                  # fit training data using the classifier
    y_pred = clf.predict(X)        # take the classifier and run it on the training data
    train_error = 1 - metrics.accuracy_score(y, y_pred, normalize=True)
    print('\t-- training error: %.3f' % train_error)





    ### ========== TODO : START ========== ###
    # part b: evaluate training error of Random classifier
    print('Classifying using Random...')
    clf_random = RandomClassifier()
    clf_random.fit(X,y)
    y_pred = clf_random.predict(X)
    train_error = 1 - metrics.accuracy_score(y, y_pred, normalize=True)
    print('\t-- training error: %.3f' % train_error)
    ### ========== TODO : END ========== ###





    ### ========== TODO : START ========== ###
    # part c: evaluate training error of Decision Tree classifier
    print('Classifying using Decision Tree...')
    clf_decision_tree = DecisionTreeClassifier(criterion = 'entropy')
    clf_decision_tree.fit(X,y)
    y_pred = clf_decision_tree.predict(X)
    train_error = 1 - metrics.accuracy_score(y, y_pred, normalize=True)
    print('\t-- training error: %.3f' % train_error)
    ### ========== TODO : END ========== ###






    ### ========== TODO : START ========== ###
    # part d: evaluate training error of k-Nearest Neighbors classifier
    # use k = 3, 5, 7 for n_neighbors
    print('Classifying using k-Nearest Neighbors...')
    clf_3_neighbors = KNeighborsClassifier(n_neighbors=3)
    clf_3_neighbors.fit(X,y)
    y_pred = clf_3_neighbors.predict(X)
    train_error = 1 - metrics.accuracy_score(y, y_pred, normalize=True)
    print('\t-- training error with K=3: %.3f' % train_error)

    clf_5_neighbors = KNeighborsClassifier(n_neighbors=5)
    clf_5_neighbors.fit(X,y)
    y_pred = clf_5_neighbors.predict(X)
    train_error = 1 - metrics.accuracy_score(y, y_pred, normalize=True)
    print('\t-- training error with K=5: %.3f' % train_error)

    clf_7_neighbors = KNeighborsClassifier(n_neighbors=5)
    clf_7_neighbors.fit(X,y)
    y_pred = clf_7_neighbors.predict(X)
    train_error = 1 - metrics.accuracy_score(y, y_pred, normalize=True)
    print('\t-- training error with K=7: %.3f' % train_error)

    ### ========== TODO : END ========== ###





    ### ========== TODO : START ========== ###
    # part e: use cross-validation to compute average training and test error of classifiers
    print('Investigating various classifiers...')

    #Majority vote
    train_error, test_error, f1_score = error(clf, X, y)
    print('\t-- training error for MajorityVoteClassifier: %.3f' % train_error)
    print('\t-- testing error for MajorityVoteClassifier: %.3f' % test_error)
    print('\t-- f1 score for MajorityVoteClassifier: %.3f' % f1_score)

    #Random Classifier 
    train_error, test_error, f1_score = error(clf_random, X, y)
    print('\t-- training error for RandomClassifier: %.3f' % train_error)
    print('\t-- testing error for RandomClassifier: %.3f' % test_error)
    print('\t-- F1 score for RandomClassifier: %.3f' % f1_score)

    #Decision Tree 
    train_error, test_error, f1_score = error(clf_decision_tree, X, y)
    print('\t-- training error for DecisionTree: %.3f' % train_error)
    print('\t-- testing error for DecisionTree: %.3f' % test_error)
    print('\t-- F1 score for DecisionTree: %.3f' % f1_score)

    #3 Nearest Neighbors
    train_error, test_error, f1_score = error(clf_3_neighbors, X, y)
    print('\t-- training error for 3NearestNeighbors: %.3f' % train_error)
    print('\t-- testing error for 3NearestNeighbors: %.3f' % test_error)
    print('\t-- F1 score for 3NearestNeighbors: %.3f' % f1_score)

    #5 Nearest Neighbors
    train_error, test_error, f1_score = error(clf_5_neighbors, X, y)
    print('\t-- training error for 5NearestNeighbors: %.3f' % train_error)
    print('\t-- testing error for 5NearestNeighbors: %.3f' % test_error)
    print('\t-- F1 score for 5NearestNeighbors: %.3f' % f1_score)

    #7 Nearest Neighbors
    train_error, test_error, f1_score = error(clf_7_neighbors, X, y)
    print('\t-- training error for 7NearestNeighbors: %.3f' % train_error)
    print('\t-- testing error for 7NearestNeighbors: %.3f' % test_error)
    print('\t-- F1 score for 7NearestNeighbors: %.3f' % f1_score)
    
    ### ========== TODO : END ========== ###





    ### ========== TODO : START ========== ###
    # part f: use 10-fold cross-validation to find the best value of k for k-Nearest Neighbors classifier
    print('Finding the best k...')
    K = []
    for i in range(1,51,2):
      K.append(i)
    validation_error = []
    for current_k in K:
      clf_current = KNeighborsClassifier(n_neighbors = current_k)
      validation_error_current = 1 -  cross_val_score(clf_current, X, y, cv = 10).mean()
      validation_error.append(validation_error_current)
    plt.figure()
    plt.plot(K, validation_error, label ="K-Nearest Neighbors and the Validation Error")
    plt.xticks(np.arange(0, 51, 5))
    plt.xlabel('K (Number of Nearest Neighbors Considered)')
    plt.ylabel('Validation Error')
    plt.show()

    ### ========== TODO : END ========== ###





    ### ========== TODO : START ========== ###
    # part g: investigate decision tree classifier with various depths
    print('Investigating depths...')
    depths = []
    trainErrors = []
    testErrors = []
    for i in range (1,21):
      depths.append(i)
      clfTree = DecisionTreeClassifier(criterion='entropy',max_depth=i)
      train_error, test_error, f1= error(clfTree,X,y)
      trainErrors.append(train_error)
      testErrors.append(test_error)
    plt.figure()
    trainLine, = plt.plot(depths,trainErrors,label="Training Error")
    testLine, = plt.plot(depths,testErrors,label="Test Error")
    plt.xlabel('Depth Limit')
    plt.ylabel('Validation Error')
    plt.legend(handles=[trainLine, testLine])
    plt.xticks(np.arange(0, 22, 1))
    plt.show()

    ### ========== TODO : END ========== ###





    ### ========== TODO : START ========== ###
    # part h: investigate decision tree and k-Nearest Neighbors classifier with various training set sizes
   
    SSS = StratifiedShuffleSplit(n_splits = 1, test_size = 0.1, \
                                      random_state = 0)
    
    for train_index, test_index in SSS.split(X,y):
      #Get the data
      X_train, X_test = X[train_index], X[test_index]
      y_train, y_test = y[train_index], y[test_index]

    #Make our models:
    #Best k is 15
    #Best depth is 5
    clf_5_tree = DecisionTreeClassifier(criterion='entropy',max_depth=5)
    clf_15_nearest = KNeighborsClassifier(n_neighbors=15)

    clf_5_tree_test_errors = []
    clf_5_tree_train_errors = []
    clf_15_nearest_test_errors = []
    clf_15_nearest_train_errors = []

    percents = [0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0] #Different training sizes
    for i in percents:
      

      #----
      #Train the Decision Tree
      X_train_subset = X_train[:int(len(X_train)*i)] #Grab percent of training data
      y_train_subset = y_train[:int(len(y_train)*i)]
      clf_5_tree.fit(X_train_subset, y_train_subset)
      y_train_pred = clf_5_tree.predict(X_train_subset)
      y_test_pred = clf_5_tree.predict(X_test)

      #Measure the errors
      treeTrainError = 1 - metrics.accuracy_score(y_train_subset, y_train_pred, normalize = True)
      treeTestError = 1 - metrics.accuracy_score(y_test, y_test_pred, normalize = True)
      
      #----
      #Train the K-Nearest Neighbor 
      clf_15_nearest.fit(X_train_subset, y_train_subset)
      y_train_pred = clf_15_nearest.predict(X_train_subset)
      y_test_pred = clf_15_nearest.predict(X_test)

      #Measure the errors
      kNearestTrainError = 1 - metrics.accuracy_score(y_train_subset, y_train_pred, normalize = True)
      kNearestTestError = 1 - metrics.accuracy_score(y_test, y_test_pred, normalize = True)

      clf_5_tree_train_errors.append(treeTrainError)
      clf_5_tree_test_errors.append(treeTestError)
      clf_15_nearest_train_errors.append(kNearestTrainError)
      clf_15_nearest_test_errors.append(kNearestTestError)
    plt.figure()
    clf_5_train_line, = plt.plot(percents,clf_5_tree_train_errors,label="Decision Tree Training Error with Depth=5")
    clf_5_test_line, = plt.plot(percents,clf_5_tree_test_errors,label="Decision Tree Testing Error with Depth=5")
    clf_15_nearest_train_line, = plt.plot(percents,clf_15_nearest_train_errors,label="K-Nearest Neighbor\
    Training Error with K=15")
    clf_15_nearest_test_line, = plt.plot(percents,clf_15_nearest_test_errors,label="K-Nearest Neighbor\
    Testing Error with K=15")
    plt.xlabel("Percent of Total Training Data")
    plt.ylabel("Error")
    plt.xticks(np.arange(0.0, 1.1, 0.1))
    plt.legend(handles=[clf_5_train_line,clf_5_test_line,clf_15_nearest_train_line,clf_15_nearest_test_line])
    plt.show()

    
    #Do 0.1 -> 1 of the 90 training data we just made

    ### ========== TODO : END ========== ###


    #Part i, standard scalar


    print('Done')


if __name__ == "__main__":
    main()